# instruc2.cfg - Arquivo de configuracao para instrucoes
# $Id: instruc.cfg,v 1.11 1999/02/01 23:01:30 andre Exp $
#
# Sintaxe: INSTRUCAO <op1> <op2> : <codigo hexa>
# opX pode ser:
# a) um registrador (indicado pelo nome)
# b) byte - um byte
# c) word - uma palavra
# d) end - endereco
# e) [registrador] - endereco apontado por registrador
# f) [registrador+] - endereco apontado por registrador com ajuste
# g) [simbolo] - endereco apontado por simbolo
# i) desloc - deslocamento com relacao 'a posicao atual (compl. a 2)

# Operacoes aritmeticas - checado 2 vezes 
ADD     ax, dx  : 0x01D0
ADD     bh, byte        : 0x80C7 # ok
ADD     sp, byte        : 0x83C4 # ok

DEC     cl      : 0xFEC9 # ok
DEC     ax      : 0x48 # ok
DEC	cx	: 0x49 # ok
DEC     dx      : 0x4A # ok

INC     ax      : 0x40 # ok
INC     cx      : 0x41 # ok
INC     dx      : 0x42 # ok
INC	bx	: 0x43 # ok
INC     si      : 0x46 # ok

INC     cl      : 0xFEC1 # ok
INC     dl      : 0xFEC2 # ok
INC     dh      : 0xFEC6 # ok

SUB     cl, dl  	: 0x2ACA # ok
SUB	sp, byte	: 0x83EC # ok

## Interrupcoes - checado 2 vezes 
INT     byte    : 0xCD # chamada de interrupcao 

## Pulos condicionais - J?? rel8 (os jumps tem q ser curtos!!)
JE      desloc8  : 0x74 # ok
JB      desloc8  : 0x72 # ok
JNA     desloc8  : 0x76 # ok
JNZ     desloc8  : 0x75 # ok
JZ      desloc8  : 0x74 # ok, a mesma coisa do JE!!

## Pulos incondicionais 
JMP     desloc16  : 0xE9   # ok
JMP     ax      : 0xFFE0 # ok
JMP     bx      : 0xFFE3 # ok

## Movimentacao de dados - checagos 2 vezes. 

# mov r16, imm16
MOV     ax, word        : 0xB8 # ok
MOV     cx, word        : 0xB9 # ok
MOV     dx, word        : 0xBA # ok
MOV     bx, word        : 0xBB # ok
MOV     sp, word        : 0xBC # ok

# mov r8, imm8
MOV     al, byte        : 0xB0 # ok
MOV     cl, byte        : 0xB1 # ok
MOV     ah, byte        : 0xB4 # ok
MOV     ch, byte        : 0xB5 # ok
MOV     bh, byte        : 0xB7 # ok

# mov r/m16, r16
MOV     ax, bx  : 0x89D8 # ok
MOV     ax, cx  : 0x89C8 # ok
MOV     ax, dx  : 0x89D0 # ok
MOV     cx, ax  : 0x89C1 # ok
MOV     dx, ax  : 0x89C2 # ok
MOV     bx, ax  : 0x89C3 # ok
MOV     bx, cx  : 0x89CB # ok
MOV     bp, sp  : 0x89E5 # ok
MOV	[bp+], cx	: 0x894E # ok
MOV     [bx], ax        : 0x8907 #

# mov r16, r/m16
MOV	ax, [bp+]	: 0x8B46 # ok
MOV     dx, [bp+]       : 0x8B56 # ok
MOV	bx, [bp+]	: 0x8B5E # ok
MOV     si, [bp+]       : 0x8B76 # ok
MOV     ax, [bx]        : 0x8B07 # ok

## Sregs to/from regs
MOV	ax, es	: 0x8CC0 # ok
MOV     ax, cs  : 0x8CC8 # ok
MOV     ax, ss  : 0x8CD0 # ok
MOV     ax, ds  : 0x8CD8 # ok
MOV	ax, fs	: 0x8CE0 # ok
MOV     ax, gs  : 0x8CE8 # ok

MOV	es, ax  : 0x8EC0 # mov Sreg, r/m16
# MOV	cs, ax	: 0x8EC8 # forbidden!!!
MOV     ss, ax  : 0x8ED0 # ok
MOV     ds, ax  : 0x8ED8 # ok
MOV	fs, ax	: 0x8EE0 # ok
MOV     gs, ax  : 0x8EE8 # ok

# mov r8, r/m8
MOV     al, [si]	: 0x8A04 # ok
MOV     cl, [si]        : 0x8A0C # ok
MOV     cl, [bp+]       : 0x8A4E # ok
MOV     ch, [bp+]       : 0x8A6E # ok
MOV     dl, [bp+]       : 0x8A56 # ok
MOV     dh, [bp+]       : 0x8A76 # ok
MOV     bl, ah  	: 0x8ADC # ok
MOV     bh, dh  	: 0x8AFE # ok
 
## Operacoes binarias - checado 2 vezes
CMP     ax, dx  : 0x39D0 # ok
CMP     ax, bx  : 0x39D8 # ok

CMP     dl, [bp+]       : 0x3A56 # ok
CMP     dh, [bp+]	: 0x3A76 # ok
CMP     dh, cl  	: 0x3AF1 # ok
CMP     dh, bh  	: 0x3AF7 # ok

CMP     cl, byte        : 0x80F9 # ok

CMP	ax, word	: 0x3D # ok
CMP	cx, word	: 0x81F9 # ok
CMP     dx, word        : 0x81FA # ok
CMP	bx, word	: 0x81FB # ok

XOR     ax, ax  : 0x31C0 # ok
XOR     ax, dx  : 0x31D0 # ok
XOR     bx, bx  : 0x31DB # ok

XOR     al, al  : 0x30C0 # ok

## Uso da pilha - checado 2 vezes
POP     ax      : 0x58 # ok
POP     cx      : 0x59 # ok
POP     dx      : 0x5A # ok
POP     bx      : 0x5B # ok
POP     bp      : 0x5D # ok
POP     si      : 0x5E # ok

POPF            : 0x9D # ok

PUSH    ax      : 0x50 # ok
PUSH    cx      : 0x51 # ok
PUSH    dx      : 0x52 # ok
PUSH    bx      : 0x53 # ok
PUSH    bp      : 0x55 # ok
PUSH    si      : 0x56 # ok

PUSHF           : 0x9C # ok

## Procedimentos - checado 2 vezes 
CALL    desloc16  : 0xE8 # ok, mudado

RET             : 0xC3 # ok

## O que falta





